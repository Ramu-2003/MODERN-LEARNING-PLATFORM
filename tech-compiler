<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TECH-COMPILER</title>
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs/loader.min.js"></script>
  <style>
    :root {
  --bg-primary: #111827;
  --bg-secondary: #1f2937;
  --text-primary: #f3f4f6;
  --text-secondary: #9ca3af;
  --accent-primary: #6366f1;
  --accent-secondary: #8b5cf6;
  --error: #ef4444;
  --success: #10b981;
  --info: #3b82f6;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'JetBrains Mono', monospace;
}

body {
  background-color: var(--bg-primary);
  color: var(--text-primary);
  min-height: 100vh;
}

.app {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

header {
  background-color: var(--bg-secondary);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  padding: 1rem;
  position: sticky;
  top: 0;
  z-index: 50;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.title {
  font-size: 1.875rem;
  font-weight: bold;
  background: linear-gradient(to right, var(--accent-primary), var(--accent-secondary), #ec4899);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: gradient 8s linear infinite;
  background-size: 200% 200%;
}

.header-buttons {
  display: flex;
  gap: 1rem;
}

.btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  border: none;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s;
}

.btn-primary {
  background-color: var(--accent-primary);
  color: white;
}

.btn-primary:hover {
  background-color: #4f46e5;
  transform: scale(1.05);
}

.btn-secondary {
  background-color: var(--accent-secondary);
  color: white;
}

.btn-secondary:hover {
  background-color: #7c3aed;
  transform: scale(1.05);
}

.icon {
  width: 1rem;
  height: 1rem;
}

main {
  flex: 1;
  padding: 1rem;
}

.editor-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  height: calc(100vh - 5rem);
}

.editor-grid.expanded .editor-section {
  display: none;
}

.editor-grid.expanded .preview-section {
  grid-column: 1 / -1;
}

.editor-section {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.tabs {
  display: flex;
  background-color: var(--bg-secondary);
  border-radius: 0.5rem 0.5rem 0 0;
  overflow: hidden;
}

.tab {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  transition: all 0.2s;
}

.tab:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.tab.active {
  background-color: var(--accent-primary);
  color: white;
}

.code-editor {
  flex: 1;
  border-radius: 0 0 0.5rem 0.5rem;
  overflow: hidden;
}

.console {
  height: 200px;
  background-color: var(--bg-secondary);
  border-radius: 0.5rem;
  overflow: hidden;
}

.console-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.5rem 1rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.console-title {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: var(--text-secondary);
}

.btn-clear {
  background: none;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
}

.btn-clear:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.console-output {
  height: calc(100% - 2.5rem);
  padding: 1rem;
  overflow-y: auto;
  font-size: 0.875rem;
}

.console-output .error {
  color: var(--error);
}

.console-output .success {
  color: var(--success);
}

.console-output .info {
  color: var(--info);
}

.preview-section {
  background-color: white;
  border-radius: 0.5rem;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.preview-header {
  background-color: var(--bg-secondary);
  padding: 0.5rem 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.window-controls {
  display: flex;
  gap: 0.5rem;
}

.control {
  width: 0.75rem;
  height: 0.75rem;
  border-radius: 50%;
}

.control.red { background-color: #ef4444; }
.control.yellow { background-color: #f59e0b; }
.control.green { background-color: #10b981; }

iframe {
  flex: 1;
  width: 100%;
  border: none;
  background-color: white;
}

@keyframes gradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: var(--bg-secondary);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: var(--accent-primary);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #4f46e5;
}
  </style>
</head>
<body>
  <div class="app">
    <header>
      <h1 class="title">TECH-IN-MY-STYLE</h1>
      <div class="header-buttons">
        <button id="refreshBtn" class="btn btn-primary">
          <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9"></path>
          </svg>
          Refresh
        </button>
        <button id="expandBtn" class="btn btn-secondary">
          <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M8 3v3a2 2 0 01-2 2H3m18 0h-3a2 2 0 01-2-2V3m0 18v-3a2 2 0 012-2h3M3 16h3a2 2 0 012 2v3"></path>
          </svg>
          Expand
        </button>
      </div>
    </header>

    <main>
      <div class="editor-grid">
        <div class="editor-section">
          <div class="tabs">
            <button class="tab active" data-tab="html">
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14.5 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V7.5L14.5 2z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
              </svg>
              HTML
            </button>
            <button class="tab" data-tab="css">
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M2 3h6a4 4 0 01 4 4v14a3 3 0 00-3-3H2z"></path>
                <path d="M22 3h-6a4 4 0 00-4 4v14a3 3 0 013-3h7z"></path>
              </svg>
              CSS
            </button>
            <button class="tab" data-tab="js">
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="3" y1="9" x2="21" y2="9"></line>
              </svg>
              JavaScript
            </button>
          </div>
          <div id="editor" class="code-editor"></div>
          
          <div class="console">
            <div class="console-header">
              <div class="console-title">
                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="4 17 10 11 4 5"></polyline>
                  <line x1="12" y1="19" x2="20" y2="19"></line>
                </svg>
                Console Output
              </div>
              <button id="clearConsole" class="btn-clear">Clear</button>
            </div>
            <div id="consoleOutput" class="console-output"></div>
          </div>
        </div>

        <div class="preview-section">
          <div class="preview-header">
            <span>Preview</span>
            <div class="window-controls">
              <div class="control red"></div>
              <div class="control yellow"></div>
              <div class="control green"></div>
            </div>
          </div>
          <iframe id="preview" title="Preview"></iframe>
        </div>
      </div>
    </main>
  </div>
  <script>
    // Monaco Editor setup
require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.36.1/min/vs' } });

let editor;
let currentLanguage = 'html';
const defaultCode = {
  html: '<!-- Write your HTML here -->\n<h1>Hello World</h1>\n<p>Start coding!</p>',
  css: '/* Write your CSS here */\nh1 {\n  color: #6366f1;\n  text-align: center;\n  margin: 2rem 0;\n}\n\np {\n  color: #4b5563;\n  text-align: center;\n}',
  js: '// Write your JavaScript here\nconsole.log("Ready to code! ðŸš€");\n\n// Example: Add a click event\ndocument.querySelector("h1")?.addEventListener("click", () => {\n  alert("Hello, developer!");\n});'
};

let code = { ...defaultCode };

// Initialize Monaco Editor
require(['vs/editor/editor.main'], function() {
  editor = monaco.editor.create(document.getElementById('editor'), {
    value: code[currentLanguage],
    language: currentLanguage,
    theme: 'vs-dark',
    minimap: { enabled: false },
    fontSize: 14,
    fontFamily: 'JetBrains Mono',
    padding: { top: 16 },
    smoothScrolling: true,
    cursorSmoothCaretAnimation: true,
    formatOnPaste: true,
    formatOnType: true,
    autoClosingBrackets: 'always',
    autoClosingQuotes: 'always',
  });

  editor.onDidChangeModelContent(() => {
    code[currentLanguage] = editor.getValue();
    updatePreview();
  });

  // Initial preview
  updatePreview();
});

// Tab switching
document.querySelectorAll('.tab').forEach(tab => {
  tab.addEventListener('click', () => {
    const language = tab.dataset.tab;
    if (language === currentLanguage) return;

    // Update active tab
    document.querySelector('.tab.active').classList.remove('active');
    tab.classList.add('active');

    // Update editor
    currentLanguage = language;
    monaco.editor.setModelLanguage(editor.getModel(), language);
    editor.setValue(code[language]);
  });
});

// Preview functionality
function updatePreview() {
  const wrappedJS = `
    try {
      const originalConsole = console.log;
      const originalConsoleError = console.error;
      
      console.log = function(...args) {
        window.parent.postMessage({ type: 'log', content: args.join(' ') }, '*');
        originalConsole.apply(console, args);
      };

      console.error = function(...args) {
        window.parent.postMessage({ type: 'error', content: args.join(' ') }, '*');
        originalConsoleError.apply(console, args);
      };

      ${code.js}
    } catch (error) {
      window.parent.postMessage({ type: 'error', content: error.message }, '*');
    }
  `;

  const preview = document.getElementById('preview');
  preview.srcdoc = `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>${code.css}</style>
      </head>
      <body>
        ${code.html}
        <script>${wrappedJS}<\/script>
      </body>
    </html>
  `;
}

// Console functionality
const consoleOutput = document.getElementById('consoleOutput');

window.addEventListener('message', event => {
  if (event.data && typeof event.data === 'object') {
    const { type, content } = event.data;
    const log = document.createElement('div');
    log.textContent = `[${type.toUpperCase()}] ${content}`;
    log.className = type;
    consoleOutput.appendChild(log);
    consoleOutput.scrollTop = consoleOutput.scrollHeight;
  }
});

document.getElementById('clearConsole').addEventListener('click', () => {
  consoleOutput.innerHTML = '';
});

// Refresh button
document.getElementById('refreshBtn').addEventListener('click', updatePreview);

// Expand/Collapse button
const expandBtn = document.getElementById('expandBtn');
const editorGrid = document.querySelector('.editor-grid');

expandBtn.addEventListener('click', () => {
  editorGrid.classList.toggle('expanded');
  const icon = expandBtn.querySelector('.icon');
  const isExpanded = editorGrid.classList.contains('expanded');
  
  if (isExpanded) {
    expandBtn.innerHTML = `
      <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M4 14h6m0 0v6m0-6L3 21m17-7h-6m0 0v6m0-6l7 7M4 10h6m0 0V4m0 6L3 3m17 7h-6m0 0V4m0 6l7-7"></path>
      </svg>
      Collapse
    `;
  } else {
    expandBtn.innerHTML = `
      <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M8 3v3a2 2 0 01-2 2H3m18 0h-3a2 2 0 01-2-2V3m0 18v-3a2 2 0 012-2h3M3 16h3a2 2 0 012 2v3"></path>
      </svg>
      Expand
    `;
  }
});

// Handle window resize
window.addEventListener('resize', () => {
  editor?.layout();
});

  </script>
</body>
</html>
